// This is an example config file detailing all of the supported standard actions 
// in the library.

{
  "activityType": "impressions",
  "items": [
    {
      // The name field is strictly for the author's use, to name this sequence 
      // of actions.  The best practice is to name it after the output field
      // in the enriched record that this list generates.  If it generates more
      // than one field, name them all, or use something generic like 
      // "all the simple-copy fields".   This field is not used in the code at all.
      "name": "name_of_this_action_list",

      // All the actions to perform, in sequence to process the source fields
      // (or create the destination output field).
      "actions": [

        // --------------------------------------------------------------------
        // Custom actions can have anything in the "config" section.
        // They must have a custom ActionCreator object passed to the ActionFactory.
        // If you notice you are re-using custom actions, they may be a candidate
        // to be added to the framework.
        {
          "actionType": "custom",
          "config": {
              "any": "thing",
              "someOther": [ "things" ]
          }
        },

        // --------------------------------------------------------------------
        // Simple copy copies each source field from the input record directly to 
        // the same-named field in the output record.
        {
          "actionType": "simple-copy",
          "config": {
            "inputSource": [ "field1", "field2" ] // etc.
          }
        },

        // --------------------------------------------------------------------
        // Copy copies a field's value into a potentially-differently-named field.
        // More configurable than simple-copy.  For each element in config, 
        // you must specify a 'source' and an 'enrichedField' (destination).
        {
          "actionType": "copy",
          "config": {
            "config": [
              {
                "sourceName":        "name_of_field_from_input_record", 
                "enrichedName": "name_of_field_in_output_record"
              },
              {
                "sourceName":        "name_of_field_from_input_record2", 
                "enrichedName": "name_of_field_in_output_record2"
              }
              // etc.
            ]
          }
        },

        // --------------------------------------------------------------------
        // "Replace Null With X" checks for a null value in the input field(s),
        // and if found, will set the enriched record's field value to be
        // "X".  (IE. whatever text is following the last dash in
        // "replace-null-with-X".
        // Requires "source" field[s].
        {
          "actionType": "replace-null-with-0",
          "config": {
            "source": [ "field1", "field2" ] // etc.
          }
        },

        // --------------------------------------------------------------------
        // Lookup 
        // Does a lookup into a pre-cached table.
        // Requires "source" field[s].
        {
          "actionType": "lookup",
          "config": {

            // If this fieled is present, the next two fields are ignored and
            // the lookup is done in (what is assumed to be) a JSON array of 
            // records (simulating an input record).  
            // This will be mostly used in tests.
            "lookupFile": "./path/to/a/local/file",

            // How to access the hive table to do the lookup.  If 
            // "lookupFile" is specified, these fields are ignored.
            "lookupDB": "als_search",
            "lookupTable": "local_offer_group",

            // All of these fields (if found), will be selected and added to the 
            // enriched record (the X in "select X from ....")
            "fieldsToSelect": [
              "some_field",
              "some_other_field"
            ],

            // Field to look up (lookup on the value of the source field).  
            // This field is always required.
            "lookupField": "ods_local_offer_id",

            // This is the value to look up on.  
            // (The 'X' in "select ... where $lookupField = X").
            "lookupFieldValue": "front_door_affiliate_pty_id",

            // (OPTIONAL) If the lookup succeeds, all the actions in the onPass 
            // list will be run. 
            "onPass": [
              {
                "actionType": "custom-action",
                "config": { "key": "val" }
              },
              {
                "actionType": "custom-action2",
                "config": { "key": "val2" }
              }
            ],

            // (OPTIONAL) If the lookup fails, all the actions in the onFail list 
            // will be run. 
            "onFail": [
               {
                 "actionType": "custom-action",
                 "config": { "key": "val" }
               },
               {
                 "actionType": "reject",
                 "config": {
                   "reasonFrom": "lookup"
                 }
               }
            ]
          }
        },

        // --------------------------------------------------------------------
        // Reject 
        // 
        // One type of 'reason' field is required, but they are mutually exclusive;
        // so don't enter more than one:
        {
          "actionType": "reject",
          "config": {

            // Hard code the reason in the json.  This won't be modified by the
            // program or the framework at all.
            "reason": "Custom hard-coded reason.",

            // This option takes the reason from the last result string saved of 
            // this actionType.  (Each action caches a result string, if it succeeds
            // or fails).
            // For example, use the below in the onFail section of a lookup action:
            "reasonFrom": "lookup"
          }
        }
      ]
    }
  ]
}


